<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="${module.name}" default="build"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="antlib:org.apache.ivy.ant ">
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONFIGURATION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <property file="build-configuration.properties"/>
    <path id="headers">
        <fileset dir="${source.main.dir}">
            <include name="**/*.h"/>
            <exclude name="**/Examples/**/*"/>
        </fileset>
    </path>
    <path id="classes">
        <fileset dir="${source.main.dir}">
            <include name="**/*.m"/>
            <exclude name="**/main.m"/>
            <exclude name="**/Examples/**/*"/>
        </fileset>
    </path>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PUBLIC TARGETS (can depend on other targets) ~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <target name="build" depends="
        --init,
        --clean,
        --compile.core-lib,
        --run.tests,
        --assemble.coverage.data,
        --coverage.report,
        --api.report"/>

    <target name="jenkins" depends="
        build, 
        --compile.core-lib,
        --compile.framework,
        --set.up.project.templates,
        --compile.installer,
        --prepare.artifacts,
        --publish.site"/>

    <target name="publish-installer" depends="
    release,
    --publish.installer"/>

    <target name="fast">
        <property name="fast" value="yes"/>
    </target>

    <target name="release" depends="
        --init,
        --clean,
        --compile.framework,
        --set.up.project.templates,
        --compile.installer,
        --prepare.artifacts"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END PUBLIC TARGETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PRIVATE TARGETS (MUST NOT depend on other targets!) ~~~~~~~~~~~~~~~~~~~ -->
    <target name="--init">
        <exec executable="xcode-select" outputproperty="xcode.path">
            <arg line="-print-path"/>
        </exec>

        <mkdir dir="${target.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <mkdir dir="${temp.dir}/coverage-data"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.dir}/tests"/>
    </target>

    <target name="--clean" unless="fast">
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <fail unless="xcode.path" message="Xcode path is not set"/>

        <echo message="Based on xcode-select, simulator path is: ${xcode.path}/${simulator.path}"/>

        <echo file="${temp.dir}/quit-simulator.script">
            tell application "${xcode.path}/${simulator.path}" to quit
        </echo>
        <exec executable="osascript" failonerror="true" failifexecutionfails="true">
            <arg line="${temp.dir}/quit-simulator.script"/>
        </exec>

        <delete dir="${target.dir}"/>
    </target>

    <target name="--compile.core-lib">
        <echo message="This target ensures a correct layered architecture, with Core having no dependencies on UIKit"/>
        <echo message="or user interface"/>
        <exec executable="${xcodebuild}" failonerror="true">
            <arg line="-target expanzCore"/>
        </exec>
    </target>

    <target name="--compile.framework">
        <exec executable="${xcodebuild}" failonerror="true">
            <arg line="-target expanz-iOS-SDK"/>
        </exec>
    </target>

    <target name="--compile.installer">
        <mkdir dir="${release.dir}"/>
        <exec executable="${packager.path}">
            <arg line="--doc ${source.installer.dir}/installer.pmdoc --out ${packager.out}"/>
        </exec>
    </target>

    <target name="--prepare.artifacts">
        <delete dir="${target.dir}/temp"/>
        <delete dir="${target.dir}/expanz-iOS-SDK.build"/>
    </target>

    <target name="--simulator.launch">
        <echo file="${temp.dir}/fg-simulator.script">
            tell application "${xcode.path}/${simulator.path}" to launch
            tell application "${xcode.path}/${simulator.path}" to activate
        </echo>
        <echo message="Launching the iPhone simulator for unit tests. . "/>
        <echo message="Leave it running in the foreground, or things won't work."/>
        <exec executable="osascript" failonerror="true" failifexecutionfails="true">
            <arg line="${temp.dir}/fg-simulator.script"/>
        </exec>
    </target>

    <target name="--run.tests">
        <exec executable="${xcodebuild}" failonerror="true">
            <arg line="-sdk iphonesimulator${module.sdk.version} -target ${tests.target.name}"/>
        </exec>
    </target>

    <target name="--assemble.coverage.data">
        <mkdir dir="${temp.dir}/coverage-data"/>
        <pathconvert pathsep=", " property="gcno.list" refid="classes">
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.m" to="**/*.gcno"/>
                </chainedmapper>
            </mapper>
        </pathconvert>
        <echo message="Coverage info files: ${gcno.list}"/>
        <copy todir="${temp.dir}/coverage-data" flatten="true">
            <fileset dir="${target.dir}" includes="${gcno.list}"/>
        </copy>
        <pathconvert pathsep=", " property="gcda.list" refid="classes">
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.m" to="**/*.gcda"/>
                </chainedmapper>
            </mapper>
        </pathconvert>
        <echo message="Coverage data files: ${gcda.list}"/>
        <copy todir="${temp.dir}/coverage-data" flatten="true">
            <fileset dir="${target.dir}" includes="${gcda.list}"/>
        </copy>
    </target>

    <target name="--coverage.report">
        <property name="coverage.reports.dir" value="${reports.dir}/coverage"/>
        <mkdir dir="${coverage.reports.dir}"/>

        <echo file="${temp.dir}/geninfo.sh">
            #!/bin/sh
            geninfo ${temp.dir}/coverage-data/*.gcno --no-recursion --output-filename \
            ${temp.dir}/${module.name}-temp.info
            #Remove symbols we're not interested in.
            lcov -r ${temp.dir}/${module.name}-temp.info UIGeometry.h CGGeometry.h > ${temp.dir}/${module.name}.info
        </echo>
        <chmod perm="+x" file="${temp.dir}/geninfo.sh"/>
        <exec executable="${temp.dir}/geninfo.sh" failonerror="true" failifexecutionfails="true"/>

        <echo file="${temp.dir}/genhtml.sh">
            #!/bin/sh
            genhtml --no-function-coverage --no-branch-coverage -o ${coverage.reports.dir} \
            ${temp.dir}/${module.name}.info
        </echo>
        <chmod perm="+x" file="${temp.dir}/genhtml.sh"/>
        <exec executable="${temp.dir}/genhtml.sh" failonerror="true" failifexecutionfails="true"/>
    </target>

    <target name="--api.report">
        <property name="docs.dir" value="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <mkdir dir="${docs.dir}"/>
        <mkdir dir="${reports.dir}/api"/>
        <mkdir dir="${user.home}/Library/Developer/Shared"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <!-- In case it's turned up somehow, despite cleaning up. -->
        <delete file="${basedir}/docset-installed.txt"/>

        <pathconvert pathsep=" " property="doc.files.list" refid="headers"/>

        <exec executable="${appledoc.bin}">
            <arg line="--project-name=${module.name}"/>
            <arg line="--project-company=${module.company}"/>
            <arg line="--company-id=${module.company}"/>
            <arg line="-h --keep-undocumented-objects --keep-undocumented-members"/>
            <arg line="${doc.files.list}"/>
        </exec>

        <loadfile srcfile="${basedir}/docset-installed.txt" property="docset.installed"/>
        <fail unless="docset.installed" message="Error creating documentation"/>
        <!-- Don't leave it lying around -->
        <delete file="${basedir}/docset-installed.txt"/>

        <property name="docs.dir" value="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <copy todir="${reports.dir}/api">
            <fileset dir="${docs.dir}/${module.company}.${module.name}.docset/Contents/Resources/Documents"/>
        </copy>
    </target>

    <target name="--set.up.project.templates">
        <delete dir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks"/>
        <mkdir dir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks"/>
        <mkdir dir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks/expanziOS.framework"/>
        <mkdir dir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks/LRResty.framework"/>

        <copy todir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks/expanziOS.framework">
            <fileset dir="${target.dir}/Release-iphoneuniversal/expanziOS.framework"/>
        </copy>
        <copy todir="${template.dir}/expanz iPhone.xctemplate/ExpanzFrameworks/LRResty.framework">
            <fileset dir="${basedir}/Dependencies/Frameworks/LRResty.framework"/>
        </copy>

        <copy todir="${template.dir}/expanz iPhone.xctemplate/Assets">
            <fileset dir="${basedir}/Source/Examples/Assets">
                <include name="ActivityMenu.xib"/>
                <include name="background.png"/>
                <include name="DocumentView.xib"/>
                <include name="Icon.png"/>
                <include name="Login.xib"/>
                <include name="MainWindow.xib"/>
                <include name="TableCellForGridData.xib"/>
                <include name="TableCellForTreeData.xib"/>
            </fileset>
        </copy>
    </target>

    <target name="--publish.site">
        <echo file="${temp.dir}/publish-site.sh">
            #!/bin/sh
            cd ${basedir}
            git checkout gh-pages
            git pull
            rm -fr ./coverage
            cp -fr ${reports.dir}/coverage/ ./coverage
            git add ./coverage
            rm -fr ./api
            cp -fr ${reports.dir}/api ./api
            git add api
            git commit -a -m "publish reports to gh-pages"
            git push -u origin gh-pages
            git checkout master
        </echo>
        <chmod perm="+x" file="${temp.dir}/publish-site.sh"/>
        <exec executable="${temp.dir}/publish-site.sh" failonerror="true" failifexecutionfails="true"/>
    </target>

    <target name="--publish.installer">
        <echo file="${temp.dir}/publish-site.sh">
            #!/bin/sh
            cd ${basedir}
            git checkout gh-pages
            git pull
            rm -fr ./installer
            cp -fr ${release.dir} ./installer
            git add ./installer
            git commit -a -m "publish installer to gh-pages"
            git push -u origin gh-pages
            git checkout master
        </echo>
        <chmod perm="+x" file="${temp.dir}/publish-site.sh"/>
        <exec executable="${temp.dir}/publish-site.sh" failonerror="true" failifexecutionfails="true"/>
    </target>

</project>
