<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="${module.name}" default="build">
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONFIGURATION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <property file="build-configuration.properties"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PUBLIC TARGETS (can depend on other targets) ~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <target name="build" depends="
    --make.dirs,
    --clean,
    --simulator.launch,
    --clean,
    --make.dirs,
    --unit.tests.build,
    --unit.tests.run,
    --coverage.report,
    --api.report"/>


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END PUBLIC TARGETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->


    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PRIVATE TARGETS (MUST NOT depend on other targets!) ~~~~~~~~~~~~~~~~~~~ -->
    <target name="--make.dirs">

        <mkdir dir="${target.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${reports.dir}/tests"/>
    </target>

    <target name="--clean">
        <echo file="${temp.dir}/quit-simulator.script">
            tell application "${simulator.path}" to quit
        </echo>
        <exec executable="osascript" failonerror="true" failifexecutionfails="true">
            <arg line="${temp.dir}/quit-simulator.script"/>
        </exec>

        <delete dir="${target.dir}"/>
        <delete dir="${user.home}/Library/Application Support/iPhone Simulator/4.3.2/Applications"/>
        <mkdir dir="${user.home}/Library/Application Support/iPhone Simulator/4.3.2/Applications"/>
    </target>

    <target name="--simulator.launch">
        <echo file="${temp.dir}/fg-simulator.script">
            tell application "${simulator.path}" to launch
            tell application "${simulator.path}" to activate
        </echo>
        <echo message="Launching the iPhone simulator. Leave it running in the foreground, or things won't work"/>
        <exec executable="osascript" failonerror="true" failifexecutionfails="true">
            <arg line="${temp.dir}/fg-simulator.script"/>
        </exec>
    </target>

    <target name="--unit.tests.build">
        <exec executable="xcodebuild" failonerror="true">
            <arg line="-sdk iphonesimulator${sdk.version} -target ${unit.tests.target.name}"/>
        </exec>
    </target>

    <target name="--unit.tests.run">
        <mkdir dir="${reports.dir}/tests/unit"/>
        <property name="unit.tests.report" value="${reports.dir}/tests/unit/unit-test-results.txt"/>
        <exec executable="${basedir}/ios-sim" outputproperty="unit.tests.output" failonerror="true"
              failifexecutionfails="true">
            <arg line="launch ${target.dir}/Release-iphonesimulator/${unit.tests.target.name}.app"/>
            <arg line="--setenv CEDAR_HEADLESS_SPECS=1"/>
            <arg line="--setenv CEDAR_REPORTER_CLASS=CDRColorizedReporter"/>
        </exec>

        <!-- Write report to disk -->
        <echo file="${unit.tests.report}" message="${unit.tests.output}"/>
        <!-- Print report to console -->
        <echo message="${unit.tests.output}"/>

        <loadfile srcfile="${unit.tests.report}" property="tests.failed">
            <filterchain>
                <filterreader classname="org.apache.tools.ant.filters.LineContains">
                    <param type="contains" value="FAILURE"/>
                </filterreader>
            </filterchain>
        </loadfile>

        <echo file="${temp.dir}/quit-simulator.script">
            tell application "${simulator.path}" to quit
        </echo>
        <exec executable="osascript" failonerror="true" failifexecutionfails="true">
            <arg line="${temp.dir}/quit-simulator.script"/>
        </exec>
        <fail if="tests.failed" message="Tests failed. Report is at ${unit.tests.report}"/>
    </target>

    <target name="--coverage.report">
        <property name="coverage.reports.dir" value="${reports.dir}/coverage"/>
        <mkdir dir="${coverage.reports.dir}"/>

        <echo file="${temp.dir}/geninfo.sh">
            geninfo ${coverage.datafile.dir}/${coverage.class.prefix}* --output-filename ${temp.dir}/${unit.tests.target.name}.info
        </echo>
        <chmod perm="+x" file="${temp.dir}/geninfo.sh"/>
        <exec executable="${temp.dir}/geninfo.sh" failonerror="true" failifexecutionfails="true"/>

        <echo file="${temp.dir}/genhtml.sh">
            genhtml -o ${coverage.reports.dir} ${temp.dir}/${unit.tests.target.name}.info
        </echo>
        <chmod perm="+x" file="${temp.dir}/genhtml.sh"/>
        <exec executable="${temp.dir}/genhtml.sh" failonerror="true" failifexecutionfails="true"/>
    </target>

    <target name="--api.report">
        <mkdir dir="${reports.dir}/api"/>
        <mkdir dir="${user.home}/Library/Developer/Shared"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation"/>
        <mkdir dir="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <delete file="${basedir}/docset-installed.txt"/>

        <exec executable="appledoc">
            <arg line="--project-name=${module.name}"/>
            <arg line="--project-company=${module.company}"/>
            <arg line="--company-id=${module.company}"/>
            <arg line="-h --keep-undocumented-objects --keep-undocumented-members"/>
            <arg line="${documentation.include}"/>
        </exec>

        <loadfile srcfile="${basedir}/docset-installed.txt" property="docset.installed"/>
        <fail unless="docset.installed" message="Error creating documentation"/>

       <property name="docs.dir" value="${user.home}/Library/Developer/Shared/Documentation/Docsets"/>
        <copy todir="${reports.dir}/api">
            <fileset dir="${docs.dir}/${module.company}.${module.name}.docset/Contents/Resources/Documents"/>
        </copy>
    </target>


</project>
